<?php

include( SEEDROOT."seedlib/SEEDGoogleService.php" );

class Calendar
{
    private $sess;

    function __construct( SEEDSessionAccount $sess )
    {
        $this->sess = $sess;
    }

    function DrawCalendar()
    {
        $s = "";
        
        $bookSlot = SEEDInput_Str("bookSlot");
        
        $raGoogleParms = array(
                'application_name' => "Google Calendar API PHP Quickstart",
                // If modifying these scopes, regenerate the credentials at ~/seed_config/calendar-php-quickstart.json
                'scopes' => implode(' ', array( Google_Service_Calendar::CALENDAR_READONLY ) ),
//                'scopes' => implode(' ', array( Google_Service_Calendar::CALENDAR ) ),
                // Downloaded from the Google API Console
                'client_secret_file' => CATS_CONFIG_DIR."google_client_secret.json",
                // Generated by getcreds.php
                'credentials_file' => CATS_CONFIG_DIR."calendar-php-quickstart.json",
        );

        $oG = new SEEDGoogleService( $raGoogleParms, false );
        $oG->GetClient();
        $service = new Google_Service_Calendar($oG->client);
        
        /* Get a list of all the calendars that this user can see
         */
        $raCalendars = array();
        $sCalendarIdPrimary = "";
        $opts = array();
        // calendars are paged; pageToken is not specified on the first time through, then nextPageToken is specified as long as it exists
        while( ($calendarList = $service->calendarList->listCalendarList( $opts )) ) {
            foreach ($calendarList->getItems() as $calendarListEntry) {
                $raCalendars[$calendarListEntry->getSummary()] = $calendarListEntry->getId();
                if( $calendarListEntry->getPrimary() ) {
                    $sCalendarIdPrimary = $calendarListEntry->getId();
                }
            }
            if( !($opts['pageToken'] = $calendarList->getNextPageToken()) ) {
                break;
            }
        }

        /* Get the id of the calendar that we're currently looking at. If there isn't one, use the primary.
         */
        $sCalendarIdCurrent = $this->sess->SmartGPC( 'calendarIdCurrent' ) ?: $sCalendarIdPrimary;

        if($bookSlot){
            $event = $service->events->get($sCalendarIdCurrent, $bookSlot);
            $event->setSummary(SEEDInput_Str("bookingSumary"));
            $service->events->update($sCalendarIdCurrent, $event->getId(), $event);
        }
        
        /* Show the list of calendars so we can choose which one to look at
         * The current calendar will be selected in the list.
         */
        $oForm = new SEEDCoreForm('Plain');

        $s .= "<form method='post'>"
             .$oForm->Select( 'calendarIdCurrent', $raCalendars, "Calendar",
                              array( 'selected' => $sCalendarIdCurrent, 'attrs' => "onchange='submit();'" ) )
             ."</form>";

        // Print the next 10 events on the user's calendar.
        $calendarId = $sCalendarIdCurrent; //'primary';//'4dfi42qffha2crceil97rfimn0@group.calendar.google.com';
        $optParams = array(
            'maxResults' => 10,
            'orderBy' => 'startTime',
            'singleEvents' => TRUE,
            'timeMin' => date('c'),
        );
        $results = $service->events->listEvents($calendarId, $optParams);

        $raEvents = $results->getItems();


        if( !count($raEvents) ) {
            $s .= "No upcoming events found.";
        } else {
            $s .= "<h3>Upcoming Events</h3>";
            $lastday = "";
            foreach( $raEvents as $event ) {
                if(strtolower($event->getSummary()) != "free" && !$this->sess->CanAdmin('Calendar')){
                    continue;
                }
                $start = $event->start->date;
                if(!$start){
                    $start = substr($event->start->dateTime, 0, strpos($event->start->dateTime, "T"));
                }
                if($start != $lastday){
                    if($lastday != ""){
                        $s .= "</div>";
                    }
                    $s .= "<div class='day'>";
                    $time = new DateTime($start);
                    $s .= "<span class='dayname'>".$time->format("l F jS Y")."</span>";
                    $lastday = $start;
                }
                $s .= $this->DrawEvent($event,$this->sess->CanAdmin('Calendar'));
            }
            $s .= "</div>";
        }
        
        $s .= "
<style>
span.appt-time,span.appt-summary {
	font-family: 'Roboto', sans-serif;
}
.drop-arrow {
	transition: all 0.2s ease;
	width: 10px;
	height: 10px;
	display: inline;
	transform: none;
}
.collapsed .drop-arrow {
	transform: rotate(-90deg);
}
.appointment {
	transition: all 0.2s ease;
	overflow: hidden;
	height: 20px;
	border: 1px dotted gray;
	border-radius: 5px;
	width: 105px;
	padding: 2px;
	background-color: #99ff99;
	margin-top: 5px;
	margin-bottom: 5px;
    box-sizing: content-box;
}
.collapsed .appointment {
	height: 0;
	border: none;
	padding: 0;
	margin: 0;
}
.day {
	margin: 2px;
}
</style>
<script>
var x = document.createElement('img');
x.src = 'https://cdn1.iconfinder.com/data/icons/pixel-perfect-at-16px-volume-2/16/5001-128.png';
x.className = 'drop-arrow';
var z = document.getElementsByClassName('day');
for(y = 0; y < z.length; y++) {
	var w = x.cloneNode();
	z[y].insertBefore(w, z[y].firstChild);
	w.onclick = rotateMe;
}
function rotateMe() {
	this.parentElement.classList.toggle('collapsed');
}
function expand() {
	var days = document.getElementsByClassName('day');
	for (var loop = 0; loop < days.length; loop++) {
		days[loop].classList.remove('collapsed');
	}
}
function collapse() {
	var days = document.getElementsByClassName('day');
	for (var loop = 0; loop < days.length; loop++) {
		days[loop].classList.add('collapsed');
	}
}
</script>";
        
        return( $s );
    }

    private function DrawEvent($event, $admin = FALSE){
        if(strtolower($event->getSummary()) != "free" && !$admin){
            return "";
        }
        $s = "";
        $start = $event->start->dateTime;
        $tz = "";
        if( empty($start) ) {
            $start = $event->start->date;
        }
        elseif ($event->start->timeZone) {
            $tz = $event->start->timeZone;
        }
        else{
            $tz = substr($start, -6);
            $start = substr($start, 0,-6);
        }
        if( !$tz ) $tz = 'America/Toronto';
        $time = new DateTime($start, new DateTimeZone($tz));
        $s .= "<div class='appointment ".(strtolower($event->getSummary()) == "free"?"free":"busy")."'".(strtolower($event->getSummary()) == "free"?$this->bookable($event->id):"").">";
        $s .= "<span class='appt-time'>".$time->format("g:ia")."</span>";
        $s .= ($admin?"<span class='appt-summary'>".$event->getSummary()."</span>":"");
        $s .= "</div>";
        return $s;
    }

    private function bookable($id){
        $s = " onclick=\"";
        $s .= "";
        $s .= "window.location='?bookSlot=$id&bookingSumary=";
        $s .= "' + prompt('Who is this appointment for?');";
        $s .= "\"";
        return $s;
    }
    
}

?>
