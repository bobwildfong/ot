<?php

include( SEEDROOT."seedlib/SEEDGoogleService.php" );

class Calendar
{
    private $oApp;
    private $sess;  // remove this, use oApp->sess instead

    function __construct( SEEDAppSessionAccount $oApp )
    {
        $this->oApp = $oApp;
        $this->sess = $oApp->sess;  // remove this
    }

    function DrawCalendar()
    {
        $s = "";

        $bookSlot = SEEDInput_Str("bookSlot");

        $raGoogleParms = array(
                'application_name' => "Google Calendar API PHP Quickstart",
                // If modifying these scopes, regenerate the credentials at ~/seed_config/calendar-php-quickstart.json
//                'scopes' => implode(' ', array( Google_Service_Calendar::CALENDAR_READONLY ) ),
                'scopes' => implode(' ', array( Google_Service_Calendar::CALENDAR ) ),
                // Downloaded from the Google API Console
                'client_secret_file' => CATS_CONFIG_DIR."google_client_secret.json",
                // Generated by getcreds.php
                'credentials_file' => CATS_CONFIG_DIR."calendar-php-quickstart.json",
        );

        $oG = new SEEDGoogleService( $raGoogleParms, false );
        $oG->GetClient();
        $service = new Google_Service_Calendar($oG->client);

        /* Get a list of all the calendars that this user can see
         */
        $raCalendars = array();
        $sCalendarIdPrimary = "";
        $opts = array();
        // calendars are paged; pageToken is not specified on the first time through, then nextPageToken is specified as long as it exists
        while( ($calendarList = $service->calendarList->listCalendarList( $opts )) ) {
            foreach ($calendarList->getItems() as $calendarListEntry) {
                $raCalendars[$calendarListEntry->getSummary()] = $calendarListEntry->getId();
                if( $calendarListEntry->getPrimary() ) {
                    $sCalendarIdPrimary = $calendarListEntry->getId();
                }
            }
            if( !($opts['pageToken'] = $calendarList->getNextPageToken()) ) {
                break;
            }
        }

        /* Get the id of the calendar that we're currently looking at. If there isn't one, use the primary.
         */
        $sCalendarIdCurrent = $this->sess->SmartGPC( 'calendarIdCurrent' ) ?: $sCalendarIdPrimary;

        if($bookSlot){
            $event = $service->events->get($sCalendarIdCurrent, $bookSlot);
            $event->setSummary(SEEDInput_Str("bookingSumary"));
            $service->events->update($sCalendarIdCurrent, $event->getId(), $event);
            echo("<head><meta http-equiv=\"refresh\" content=\"0; URL=".CATSDIR."\"></head><body><a href=".CATSDIR."\"\">Redirectn</a></body>");
            die();
        }

        /* Show the list of calendars so we can choose which one to look at
         * The current calendar will be selected in the list.
         */
        $oForm = new SEEDCoreForm('Plain');

        $s .= "<form method='post'>"
             .$oForm->Select( 'calendarIdCurrent', $raCalendars, "Calendar",
                              array( 'selected' => $sCalendarIdCurrent, 'attrs' => "onchange='submit();'" ) )
             ."</form>";

        // Print the next 10 events on the user's calendar.
        $calendarId = $sCalendarIdCurrent; //'primary';//'4dfi42qffha2crceil97rfimn0@group.calendar.google.com';
        $optParams = array(
            'maxResults' => 10,
            'orderBy' => 'startTime',
            'singleEvents' => TRUE,
            'timeMin' => date('c'),
        );
        $results = $service->events->listEvents($calendarId, $optParams);

        $raEvents = $results->getItems();

        /* Get the list of calendar events from Google
         */
        $sList = "";
        if( !count($raEvents) ) {
            $sList .= "No upcoming events found.";
        } else {
            $sList .= "<h3>Upcoming Events</h3>";
            $lastday = "";
            foreach( $raEvents as $event ) {
                if(strtolower($event->getSummary()) != "free" && !$this->sess->CanAdmin('Calendar')){
                    continue;
                }
                $start = $event->start->date;
                if(!$start){
                    $start = substr($event->start->dateTime, 0, strpos($event->start->dateTime, "T"));
                }
                if($start != $lastday){
                    if($lastday != ""){
                        $sList .= "</div>";
                    }
                    $sList .= "<div class='day'>";
                    $time = new DateTime($start);
                    $sList .= "<span class='dayname'>".$time->format("l F jS Y")."</span>";
                    $lastday = $start;
                }
                $sList .= $this->DrawEvent($event,$this->sess->CanAdmin('Calendar'));
            }
            $sList .= "</div>";
        }

        /* Get the list of appointments known in CATS
         */
        $sAppts = "<h3>CATS appointments</h3>";
        $oApptDB = new AppointmentsDB( $this->oApp );
        $raAppts = $oApptDB->GetList( "eStatus in ('NEW','REVIEWED')" );
        foreach( $raAppts as $ra ) {
            $eventId = $ra['google_event_id'];
            $eStatus = $ra['eStatus'];
            $startTime = $ra['start_time'];
            $clientId = $ra['fk_clients'];

            // Now look through the $raEvents that you got from google and try to find the google event with the same event id.
            // If the date/time is different (someone changed it it google calendar), give a warning in $sAppts.
            // If the client is not known clientId==0, give a warning in $sAppts.

        }

        $s .= "<div class='row'><div class='col-md-6'>$sList</div><div class='col-md-6'>$sAppts</div></div>";

        return( $s );
    }

    private function DrawEvent($event, $admin = FALSE){
        if(strtolower($event->getSummary()) != "free" && !$admin){
            return "";
        }
        $s = "";
        $start = $event->start->dateTime;
        $tz = "";
        if( empty($start) ) {
            $start = $event->start->date;
        }
        elseif ($event->start->timeZone) {
            $tz = $event->start->timeZone;
        }
        else{
            $tz = substr($start, -6);
            $start = substr($start, 0,-6);
        }
        if( !$tz ) $tz = 'America/Toronto';
        $time = new DateTime($start, new DateTimeZone($tz));
        $s .= "<div class='appointment ".(strtolower($event->getSummary()) == "free"?"free":"busy")."'".(strtolower($event->getSummary()) == "free"?$this->bookable($event->id):"").">";
        $s .= "<span class='appt-time'>".$time->format("g:ia")."</span>";
        $s .= ($admin?"<span class='appt-summary'>".$event->getSummary()."</span>":"");
        $s .= "</div>";
        return $s;
    }

    private function bookable($id){
        $s = " onclick=\"";
        $s .= "";
        $s .= "window.location='?bookSlot=$id&bookingSumary=";
        $s .= "' + prompt('Who is this appointment for?');";
        $s .= "\"";
        return $s;
    }

}

?>
